version: "3.4"

services:
  mobile-frontend:
    image: registry-special.tenforce.com/special/mobile-frontend:1.0.0

  transparency-frontend:
    image: registry-special.tenforce.com/special/demonstrator-transparency-frontend:1.0.1

  transparency-backend:
    image: registry-special.tenforce.com/special/kafka-sse-proxy:1.0.0
    environment:
      BROKERS: kafka:9092
      TOPIC: checked-application-logs

  consent-management-frontend:
    image: registry-special.tenforce.com/special/demonstrator-consent-management-frontend:1.0.1

  consent-management-backend:
    image: registry-special.tenforce.com/special/consent-management-backend:1.0.5
    environment:
      SERVER_HOST: consent-management-backend # Please don't do this, just bind to 0.0.0.0 in the container
      SERVER_PORT: 80
      RETHINKDB_HOST: rethinkdb
      RETHINKDB_PORT: 28015
      KAFKA_BROKER_LIST: kafka:9092
      CHANGE_LOGS_TOPIC: policies-audit
      FULL_POLICIES_TOPIC: full-policies
      AUTH_LOGIN_ENDPOINT: http://$DOMAIN/auth/realms/special/protocol/openid-connect/auth
      AUTH_CLIENT_ID: special-platform
      AUTH_CLIENT_SECRET: special-platform-secret
      AUTH_USERINFO_ENDPOINT: http://$DOMAIN/auth/realms/special/protocol/openid-connect/userinfo
      AUTH_TOKEN_ENDPOINT: http://$DOMAIN/auth/realms/special/protocol/openid-connect/token
      SERVER_AUTH_CALLBACK_ENDPOINT: http://$DOMAIN/callback
      
  policy-admin-frontend:
    image: registry-special.tenforce.com/special/demonstrator-policy-admin-frontend:1.0.3

  compliance-checker:
    image: registry-special.tenforce.com/special/compliance-checker:1.0.0
    environment:
      KAFKA_URL_LIST: "kafka:9092"
      KAFKA_CLIENT_ID: 1
      KAFKA_TOPIC_POLICY: "full-policies"
      KAFKA_TOPIC_ACCESS: "application-logs"
      KAFKA_TOPIC_CONSENT: "checked-application-logs"

  rethinkdb:
    image: rethinkdb:2.3
    volumes:
      - rethinkdb:/data

  log-generator:
    image: registry-special.tenforce.com/special/demonstrator-log-generator:1.0.6
    environment:
      RATE: 2s
      KAFKA_BROKER_LIST: kafka:9092
      KAFKA_TOPIC: application-logs
      KEYCLOAK_ENDPOINT: http://$DOMAIN:8000/auth
      KEYCLOAK_USER: demonstrator-generator
      KEYCLOAK_PASSWORD: demonstrator-generator
      BACKEND_ENDPOINT: http://consent-management-backend

  # Kafka setup (should maybe go in external deployment)
  zookeeper:
    image: zookeeper:latest
    volumes:
      - zoodata:/data
      - zoolog:/datalog

  # Networking setup is not perfect yet and will most likely change slightly once
  # I get around to testing it with multiple nodes on swarm. For local dev the current setup works fine
  # TODO: save data in a volume (or mount from host)
  kafka:
    image: wurstmeister/kafka:2.11-2.0.1
    ports:
      - target: 9094
        published: 9094
        protocol: tcp
        mode: host
    depends_on:
      - zookeeper
    environment:
      # HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ADVERTISED_HOSTNAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      # KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: application-logs:1:1,full-policies:1:1:compact,policies-audit:1:1,checked-application-logs:1:1
    volumes:
      - kafkalogs:/kafka

  # Keycloak (authentication) setup (should maybe go into an external deployment)
  # TODO: move secrets into docker secrets
  keycloak:
    image: jboss/keycloak:4.5.0.Final
    environment:
      KEYCLOAK_USER: keycloak
      KEYCLOAK_PASSWORD: keycloak
      DB_VENDOR: POSTGRES
      DB_PASSWORD: keycloak
      PROXY_ADDRESS_FORWARDING: "true"
      
  postgres:
    image: postgres:9-alpine
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - keycloakdb:/var/lib/postgresql/data

  keycloak-init:
#    image: registry-special.tenforce.com/special/keycloak-initializer:special
    build: ./keycloak-initializer
    environment:
      KEYCLOAK_ENDPOINT: http://$DOMAIN:8000/auth
    command: ["./wait-for-stop.sh", "-h", "kong-config", "--", "npm", "start"]
      
  kong-database:
    image: cassandra:2.2.13
    volumes:
      - kong-database:/var/lib/cassandra
    ports:
      - 9042:9042
      
  kong-database-migrations:
    build: ./kong-database-migrations
    depends_on:
      - kong-database
    environment:
      - KONG_DATABASE=cassandra
      - KONG_PG_HOST=kong-database
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
    command: ["./wait-for-it.sh", "kong-database:9042", "-t", "0", "--", "kong", "migrations", "bootstrap"]

  kong:
    build: ./kong
    depends_on:
      - kong-database
      - kong-database-migrations
    environment:
      KONG_DATABASE: cassandra
      KONG_PG_HOST: kong-database
      KONG_CASSANDRA_CONTACT_POINTS: kong-database
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_LISTEN_SSL: "0.0.0.0:8444"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PLUGINS: oidc
    ports:
      - 8000:8000
      - 8001:8001
      - 8443:8443
      - 8444:8444
    command: ["./wait-for-stop.sh", "-h", "kong-database-migrations", "--", "kong", "start"]
    
  kong-config:
    build: ./kong-config
    depends_on:
      - kong
    command: ["./wait-for-it.sh", "kong:8001", "-t", "5", "--", "gongfig", "import", "--url=http://kong:8001", "--file", "/config.yaml"]
    
  konga:
    image: pantsel/konga
    ports:
      - 1337:1337
    volumes:
      - /var/data/kongadata:/app/kongadata
    environment:
      NODE_ENV: production

volumes:
  keycloakdb:
    driver: local
  kong-database:
    driver: local
  rethinkdb:
    driver: local
  kafkalogs:
    driver: local
  zoodata:
    driver: local
  zoolog:
    driver: local
