version: "3.4"

services:

  ## APPLICATION ##
  welcome-page:
    image: arkhen/demonstrator-welcome-page:latest

  transparency-frontend:
      image: arkhen/demonstrator-transparency-frontend:1.0.3

  transparency-backend:
    image: arkhen/demonstrator-transparency-backend:latest
    environment:
      BROKERS: "kafka:9092"
      TOPIC: checked-application-logs

  consent-management-frontend:
    image: arkhen/demonstrator-consent-frontend:latest

  consent-management-backend:
    image: arkhen/demonstrator-consent-backend:latest
    restart: on-failure
    environment:
      SERVER_HOST: consent-management-backend
      KAFKA_BROKER_LIST: "kafka:9092"
      CHANGE_LOGS_TOPIC: policies-audit
      FULL_POLICIES_TOPIC: full-policies
    depends_on:
      - mongo-rs-setup

  mongo-db:
    image: arkhen/demonstrator-mongo:latest

  mongo-rs-setup:
    image: arkhen/demonstrator-mongo-setup:latest
    depends_on:
      - mongo-db

  policy-admin-frontend:
    image: arkhen/demonstrator-policy-frontend:latest

  compliance-checker:
    image: arkhen/demonstrator-compliance-checker:1.0.1
    restart: on-failure
    environment:
      KAFKA_URL_LIST: "kafka:9092"
      KAFKA_CLIENT_ID: 1
      KAFKA_TOPIC_POLICY: "full-policies"
      KAFKA_TOPIC_ACCESS: "application-logs"
      KAFKA_TOPIC_CONSENT: "checked-application-logs"
    volumes:
      - ./use_cases:/policies

  log-generator:
    image: arkhen/demonstrator-log-generator:latest
    restart: always
    environment:
      RATE: 30s
      KAFKA_BROKER_LIST: kafka:9092
      KAFKA_TOPIC: application-logs
      KEYCLOAK_ENDPOINT: https://keycloak:8443/auth
      KEYCLOAK_USER: demonstrator-generator
      KEYCLOAK_PASSWORD: $KEYCLOAK_GENERATOR_PASSWORD
      KEYCLOAK_CLIENT_ID: special-platform
      KEYCLOAK_CLIENT_SECRET: $KEYCLOAK_CLIENT_SECRET
      BACKEND_ENDPOINT: http://consent-management-backend

  personal-data-gateway:
    image: arkhen/demonstrator-personal-data-gateway:latest
    ports:
      - "8101:5000"

  ## KAFKA SETUP ##

  zookeeper:
    image: zookeeper:3.6.2

  kafka:
    image: wurstmeister/kafka:2.11-2.0.1
    ports:
      - "9092:9092"
      - "9094:9094"
    depends_on:
      - zookeeper
    environment:
      # HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ADVERTISED_HOSTNAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      # KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: application-logs:1:1,full-policies:1:1:compact,policies-audit:1:1,checked-application-logs:1:1,data-portability-requests:1:1

  ## KONG SETUP ##

  database-kong:
    image: postgres:13.2-alpine
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_HOST_AUTH_METHOD: trust

  kong-migration:
    image: arkhen/demonstrator-kong-migration:latest
    command: "kong migrations bootstrap"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: database-kong
      KONG_PG_USER: $POSTGRES_USER
      KONG_PG_PASSWORD: $POSTGRES_PASSWORD
    depends_on:
      - database-kong
    command: ["./wait-for-it.sh", "--host=database-kong", "--port=5432", "-t", "10", "--", "kong", "migrations", "bootstrap"]

  kong:
    image: arkhen/demonstrator-kong:latest
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: database-kong
      KONG_PG_USER: $POSTGRES_USER
      KONG_PG_PASSWORD: $POSTGRES_PASSWORD
      KONG_PROXY_LISTEN: 0.0.0.0:80
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: oidc
      KONG_NGINX_PROXY_SET: "$$session_secret c3BlY2lhbC1wbGF0Zm9ybS1zZXNzaW9uLXNlY3JldA=="
      KONG_LOG_LEVEL: info
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stdout
    depends_on:
      - kong-migration
      - database-kong
    ports:
      - "8001:8001"
      - "80:80"
    command: ["./wait-for-stop.sh", "-h", "kong-migration", "--", "kong", "start"]

  kong-config:
    image: arkhen/demonstrator-kong-config:latest
    environment:
      KEYCLOAK_ENDPOINT: http://localhost/auth
    command: ["./wait-for-it.sh", "kong:8001", "-t", "120", "--", "node", "/init-kong.js"]

  ## KEYCLOAK SETUP ##

  keycloak:
    image: jboss/keycloak:12.0.4
    ports:
      - 8080:8080
      - 8443:8443
    environment:
      KEYCLOAK_USER: keycloak
      KEYCLOAK_PASSWORD: $KEYCLOAK_PASSWORD
      DB_ADDR: database-keycloak
      DB_VENDOR: POSTGRES
      DB_DATABASE: keycloak
      DB_USER: $POSTGRES_USER
      DB_PASSWORD: $POSTGRES_PASSWORD
      PROXY_ADDRESS_FORWARDING: "true"
    depends_on:
      - database-keycloak

  database-keycloak:
    image: postgres:13.2-alpine
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_HOST_AUTH_METHOD: trust

  keycloak-init:
    image: arkhen/demonstrator-keycloak-config:latest
    environment:
      KEYCLOAK_ENDPOINT: https://keycloak:8443/auth
      KEYCLOAK_CLIENT_SECRET: $KEYCLOAK_CLIENT_SECRET
      KEYCLOAK_PASSWORD: $KEYCLOAK_PASSWORD
      KEYCLOAK_GENERATOR_PASSWORD: $KEYCLOAK_GENERATOR_PASSWORD
    depends_on:
      - keycloak


